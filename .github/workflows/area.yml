name: CI Area
on:
  push:
    branches-ignore:
      - feature/ignore/**
  pull_request:
    branches-ignore:
      - feature/ignore/**

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-DEV-500-BDX-5-1-area-guillaume.lebreton.git"

jobs:
  check_repository_cleanliness:
    name: "Check if the repository is clean and void of any unwanted files (temp, files, binary files, etc.)"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Scan files
      run: |
        arr=($(find . \( -name "#*#" -o -name "*~" \
        -o -name "*.o" -o -name "*.a" -o -name "*.hi" \
        -o -name "*.so" -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" \
         -o -path '*tmp/*' \)))
        for i in ${arr[@]}; do echo "::error file=$i,line=1,endLine=1,title=Unwanted file detected::$i"; done
        if ((${#arr[@]})); then
          exit 1
        fi

  build_docker:
    runs-on: ubuntu-latest
    needs: check_repository_cleanliness
    steps:
      - name: install and setup docker
        run: |
          sudo apt-get update -qq
          sudo apt install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
          apt-cache policy docker-ce
          sudo systemctl status docker
      - name: install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo docker-compose --version
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check if docker-compose can build
        run: sudo docker-compose build
        working-directory: .
        shell: bash

  tests_run:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '3.1.x', '6.0.x' ]
    needs: build_docker
    steps:
    - uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Install dependencies
      working-directory: AREA_ReST_API
      run: dotnet restore
    - name: Build
      working-directory: AREA_ReST_API
      run: dotnet build
    - name: Test with the dotnet CLI
      working-directory: AREA_ReST_API
      run: dotnet test

  push_to_mirror:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: tests_run
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_PRIVATE_KEY }}
